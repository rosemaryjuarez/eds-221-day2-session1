---
title: "jjj"
format: html
editor: visual
execute: 
  warning: false
---

## making and indexing data in r

**Vectors**

making vectors

```{r}
dogs <- c('teddy', 'khora','waffle', 'banjo', 'tallie', 'bolillo', 'concha')

# check class of dog
typeof(dogs)
class(dogs)
```

```{r}
my_breakfast <- c('waffle', 2, TRUE, 'coffee')

typeof(my_breakfast)

class(my_breakfast)
# list can contain different types of classes
```

```{r}
weights <-  c(50, 60, 25, 35, 55, 1, 1)

typeof(weights)
class(weights)

```

```{r}
weights_integer <- c(50L, 60L, 25L, 35L, 55L, 1L, 1L)

typeof(weights_integer)
class(weights_integer)
```

```{r}
is.numeric(weights_integer)
```

```{r}
zipcodes <- c(93105, 93901, 93401)

class(zipcodes)

zipcodes_chr <- as.character(zipcodes)

zipcodes_chr

# use as. fmailly of functions to recast data classes
# use is. family of fucntions to ask what class something is

```

Create a vector with named elements

```{r}
dog_food <- c(teddy = 'purina', waffle ='alpo', khora = 'fancy feast', banjo = 'blue diamond', tallie = "farmer's dog", bolillo = 'meat', concha = 'malt paste' )

test <- c(cat =4, dog = 10, elephant = 50)
class(test)
```

```{r}
dog_food[2]

# R uses 1 - index
#  Python uses 0 - index
```

```{r}
dog_food ['bolillo']

```

Accces Range of values in a vector

use : to refer to a range low : high

```{r}
trees <- c('ponderosa','lodgepole', 'joshua', 'jefree', 'sugar', 'yoda')

trees[1:3]

```

## Warm up for for loops

```{r}
i <- seq(1:3) # same as seq(from 1 =1, to = 3)

joshua <- 4
trees[i]
trees[joshua]
```

```{r}
trees[3] <- 'oak'

trees
```

matrix indexing

```{r}
fish_size <- matrix(c(0.8, 1.2, 0.4, 0.9), ncol = 2, nrow = 2, byrow = FALSE)

fish_size

class(fish_size)
str(fish_size)
typeof(fish_size)

fish_size[2,1]
```

```{r}
urchin <- list('blue', c(1,2,3), values = c('lunch', 'dinner', 'dessert'), 5L)
```

```{r}
urchins_list <- urchin[2]
urchins_vector <- urchin [[2]]

```

```{r}
sample1 = c(1,2,3,4,5,4,3,2,1)

sample2 <- c(3,4,1,3,1,3,3,4,4)


ttest_example <- t.test(sample1, sample2)

ttest_example
```

mean size for trees in site A is greater than the mean size in site B `r ttest_example$p.value`
